#!/usr/bin/env node

'use strict';

process.title = 'plexi';

var path = require('path');
var fs = require('fs');
var colors = require('colors');
var mkdirp = require('mkdirp');
var Application = require('../src/Application.js');
var argv = process.argv;

// check package file
var packagefile = path.resolve(process.cwd(), 'package.json');
if( !fs.existsSync(packagefile) ) {
	console.error(('ERROR: package.json not found. npm init first.').red, process.cwd());
	return;
}

var cmd = argv[2];
var arg = [];
var options = {};

if( true ) {
	var args = argv.splice(3) || [];
	for(var i=0; i < args.length; i++) {
		var s = args[i];
		if( s && !s.indexOf('--') ) options[s.substring(2)] = true;
		else if( s && !s.indexOf('-') ) options[s.substring(1)] = true;
		else arg.push(s);
	}
}

//console.log('* cmd', cmd);
//console.log('* arg', arg);
//console.log('* options', options);

var app = new Application(process.cwd(), {
	debug: options.debug
});

var fn = function(err, results) {
	if( err ) return console.error(err.toString().red);
};

var savefn = function(err, results) {
	if( err ) return console.error(err.toString().red);
	
	if( cmd === 'install' && options.save ) {
		if( !app.manifest.plexi ) app.manifest.plexi = {};
		if( !app.manifest.plexi.dependencies ) app.manifest.plexi.dependencies = {};
	
		results.forEach(function(pkg) {
			app.manifest.plexi.dependencies[pkg.name] = '^' + pkg.version;
		});
		app.manifest.save();
	} else if( cmd === 'uninstall' && options.save ) {
		results.forEach(function(pkg) {
			if( app.manifest.plexi && app.manifest.plexi.dependencies ) {
				delete app.manifest.plexi.dependencies[pkg.name];
			}
		});
		app.manifest.save();
	}
};

if( cmd === 'init' ) {
	if( options.debug ) console.log('* init...', arg);
	var activator = arg[0] || 'activator.js';
	if( !app.manifest.plexi ) app.manifest.plexi = {};
	app.manifest.plexi.activator = activator;
	app.manifest.save();
	
	var file = app.path(activator);
	if( !fs.existsSync(file) ) {
		mkdirp.sync(path.resolve(file, '..'));
		var data = fs.readFileSync(path.resolve(__dirname, '../src/activator.default.js'), {encoding: 'utf8'});
		fs.writeFileSync(file, data, {encoding: 'utf8'});
	}
} else if( cmd === 'install' ) {
	if( options.debug ) console.log('* installing...', arg);
	
	if( arg.length ) app.install(arg, savefn);
	else app.installAll(fn);
} else if( cmd === 'uninstall' ) {
	if( options.debug ) console.log('* uninstalling...', arg);
	
	if( arg.length ) app.uninstall(arg, savefn);
	else app.uninstallAll(fn);
} else if( cmd === 'link' ) {
	// TODO
	if( options.debug ) console.log('* linking...', arg || '');
	
	app.link(arg, savefn);
} else if( cmd === 'unlink' ) {
	// TODO
	if( options.debug ) console.log('* linking...', arg || '');
	
	app.unlink(arg, savefn);
} else if( cmd === 'update' ) {
	if( options.debug ) console.log('* updating...');
	
	app.uninstallAll(function(err) {
		if( err ) return console.error('error', err);
		app.installAll(fn);
	});
} else if( cmd === 'start' ) {
	if( options.debug ) console.log('* starting...', options);
	
	app.start(options);
	
	if( options.cli !== false ) app.cli().start();
} else {
	console.log('input command:init,install,uninstall,update,link,unlink,start');
}
